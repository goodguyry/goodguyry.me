@use 'sass:math';

/**
 * Strip CSS units from a value.
 *
 * @param {String} $value A CSS length value.
 *
 * @returns {String} A unitless value.
 */
@function _strip-units($value) {
  @if (type-of($value) == 'number' and not unitless($value)) {
    @return $value / ($value * 0 + 1);
  }

  @return $value;
}

/**
 * Convert px to rem or em
 * Unitless values are assumed to be in px
 *
 * @param {Number|List} $values Single value or list of values to convert
 * @param {Number} $base-value  Root font size on which to base conversions
 *
 * @returns {String} A rem value.
 */
@function _px-to-relative($px, $base-value) {
  @if ('rem' == unit($px) or 0 == $px) {
    @return $px;
  }

  @return math.div(_strip-units($px), $base-value) * 1rem;
}

/**
 * Convert a list of px values (with or without the 'px' string) to either rem or em
 *
 * @param {Number|List} $values Single value or list of values to convert
 * @param {Number} $base-value  Root font size on which to base conversions
 *
 * @returns {List|Number} A list of rem values, or a single value.
 */
@function _px-to-relative-list($values, $base-value) {
  $rem-values: ();

  @for $i from 1 through length($values) {
    $value: nth($values, $i);

    $rem-value: if(
      string == type-of($value),
      $value,
      _px-to-relative(nth($values, $i), $base-value)
    );

    $rem-values: append($rem-values, $rem-value);
  }

  @return if(
    1 < length($rem-values),
    $rem-values,
    nth($rem-values, 1)
  );
}

/**
 * Convert a list of px values (with or without the 'px' string) to rem
 *
 * @param {List}   $values Single value or list of values to convert
 * @param {Number} $base-value Root font size on which to base conversions
 */
@function rem($values, $base-value: 16) {
  @return _px-to-relative-list($values, $base-value);
}

/**
 * A Map of breakpoint values.
 */
$bp-values: (
  full: 1000, // 960 + (2 * 20)
  lg: 800,
  md: 768,
  sm: 600,
);

/**
 * Generate map of breakpoint values.
 */
@function _create-breakpoints() {
  $merged: ();

  @each $name, $value in $bp-values {
    $merged: map_merge($merged, (
      'min-#{$name}': 'min-width: #{rem($value)}',
      'max-#{$name}': 'max-width: #{rem($value - 1)}',
    ));
  }

  @return $merged;
}

// Create the media-queries map.
$media-queries: _create-breakpoints();

/**
 * Retrive prepared media query, or create one from a value.
 *
 * Ex. @media min-width(lg) {}
 * Ex. @media media(max, 1100) {}
 *
 * @param {string}        $minMax The width prefix of the media query.
 * @param {string|number} $length Key to access in the $media-queries map, or a number.
 * @return {string|boolean} The media query string or false if the key doesn't exist.
 */
@function media($minMax, $length) {
  @if ('number' == type-of($length)) {
    @return '#{$minMax}-width: #{rem($length)}';
  }

  $map-key: #{$minMax}-#{$length};

  @if (not map-has-key($media-queries, $map-key)) {
    @error "$media-queries[#{$minMax}-#{$map-key}] doesn't exist.";
    @return false;
  }

  @return map-get($media-queries, $map-key);
}

/**
 * Output a min-width media query.
 *
 * @param {string|number} $length Key to access in the $media-queries map, or a number.
 * @return {string|boolean} The media query string or false if the key doesn't exist.
 */
@function min-width($length) {
  @return media(min, $length);
}

/**
 * Output a max-width media query.
 *
 * @param {string|number} $length Key to access in the $media-queries map, or a number.
 * @return {string|boolean} The media query string or false if the key doesn't exist.
 */
@function max-width($length) {
  @return media(max, $length);
}

/**
 * Adds focus ring outline.
 */
@mixin focus-ring {
  outline: 1px dotted #000;
  outline: -webkit-focus-ring-color auto 5px;
}

/**
 * Corrects Sass processing of unicode characters, which by default results in a
 * charset rule at the top of the stylesheet.
 *
 * @param  {string} $codepoint The unicode point without escaping (ex, '2715' to represent '\2715').
 * @return {string}            A properly formatted unicode string.
 */
@function unicode($codepoint){
  @return unquote("\"")+unquote(str-insert($codepoint, "\\", 1))+unquote("\"")
}

/**
 * Visually hide an element and leave it only for screenreaders.
 */
@mixin text-only-content {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
