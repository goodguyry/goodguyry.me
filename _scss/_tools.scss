/**
 * Typography
 * @param $context  A string describing the context
 */

@mixin font($context) {
  @if $context == 'content' {
    font: {
      family: 'Merriweather', serif;
      weight: normal;
      style: normal;
    }
  } @else if $context == 'heading' {
    font: {
      family: 'Lato', sans-serif;
      weight: bold;
      style: normal;
    }
  } @else if $context == 'code' {
    font: {
      family: Consolas, Monaco, 'Andale Mono', monospace;
      weight: normal;
      style: normal;
      size: 0.7rem;
    }
  }
}

/**
 * Simple media query
 * Takes a pixel length, converts it to ems and adds the passed style declarations
 * Media query condition is always min-width
 * @param $px  The pixel length to be converted to ems
 * @param $mm  Min/Max switch; defaults to min-width
 *
 * @include responsive(px) { ... }
 */
@mixin responsive($px, $mm: 'min') {
  $width: ($px/16) + em;
  @media only screen and (#{$mm}-width: ($width)) { @content; }
}

/**
 * Add a 200ms transition
 * @param $properties  A list of the properties to be transitioned
 *
 * @include transition((property-1[, property-2]));
 */
@mixin transition($properties...) {

  $values: ();

  @each $property in $properties {
    $values: append($values, $property .2s ease, comma);
  }

  transition: $values;
}

// Flexbox Mixins
// https://developer.mozilla.org/en-US/docs/Inbox/Advanced_layouts_with_flexbox#Flexbox_Mixins
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}
